#!/usr/bin/ruby
# The above can be replaced with whatever language you choose

# Modify this file to create your hangman program.
#
# The input filename will come as an argument (see completeness_test).
input_filename = ARGV[0]

class Game
  attr_reader :word, :correct_guesses, :incorrect_guesses

  def initialize(word)
    @word = word
    @correct_guesses = []
    @incorrect_guesses = []
  end

  def status
    Status.new(
      cloaked_word: cloaked_word,
      incorrect_guesses: @incorrect_guesses,
      life_left: life_left,
    ).to_s
  end

  private

  def cloaked_word
    word.cloaked(@correct_guesses)
  end

  def life_left
    6 - incorrect_guesses.count
  end
end

class Status
  def initialize(cloaked_word:, life_left:, incorrect_guesses:)
    @cloaked_word = cloaked_word
    @life_left = life_left
    @incorrect_guesses = incorrect_guesses
  end

  def to_s
    "#{@cloaked_word} #{message}"
  end

  private

  def message
    if player_has_won?
      "YOU WIN!"
    elsif player_has_lost?
      "YOU LOSE!"
    else
      non_terminal_message
    end
  end

  def non_terminal_message
    ["life left: #{@life_left}", incorrect_guess_list].compact.join(" ")
  end

  def incorrect_guess_list
    return unless @incorrect_guesses.any?
    "incorrect guesses: #{@incorrect_guesses.join("")}"
  end

  def player_has_won?
    !@cloaked_word.include?("_")
  end

  def player_has_lost?
    @life_left <= 0
  end
end

class Word
  def initialize(value)
    @value = value
  end

  def to_s
    @value
  end

  def contains?(guess)
    @value.include?(guess)
  end

  def cloaked(correct_guesses)
    @value.split("").map do |letter|
      if correct_guesses.include?(letter)
        letter
      else
        "_"
      end
    end.join
  end
end

commands = File.read(input_filename).split("\n")
game = nil

commands.each do |command|
  next unless command.to_s.length > 0

  if command.length > 1
    game = Game.new(Word.new(command))
  else
    guess = command

    if game.word.contains?(guess)
      game.correct_guesses << guess
    else
      game.incorrect_guesses << guess
    end
  end

  puts game.status
end
